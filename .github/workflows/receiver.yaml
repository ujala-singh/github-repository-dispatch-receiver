name: Github Repository Dispatch Receiver
 
on:
  repository_dispatch:
    types: [trigger_workflow]
 
jobs:
  dispatch-receiver:
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.repo.branch != 'staging' }}
    outputs:
      service_repo_name: ${{ steps.extract_service_repo_name.outputs.service_repo_name }}
      branch_name: ${{ steps.get_branch.outputs.branch }}
      image_tag: ${{ steps.get_image_tag.outputs.image_tag }}
      service_pr_url: ${{ steps.extract_service_pr_url.outputs.service_pr_url }}
      service_pr_user: ${{ steps.extract_service_pr_url.outputs.service_pr_user }}
    steps:
      - name: An event received
        id: extract_service_repo_name
        env:
          REPO_NAME: ${{ github.event.client_payload.repo.name }}
          BRANCH_NAME: ${{ github.event.client_payload.repo.branch }}
        run: |
          echo "This Workflow got triggered from the repo: https://github.com/ujala-singh/$REPO_NAME and branch: $BRANCH_NAME."
          echo "service_repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Extract Service PR url
        id: extract_service_pr_url
        env:
          PR_URL: ${{ github.event.client_payload.repo.pr_url }}
        run: |
          echo "Service PR URL: $PR_URL"
          echo "service_pr_url=$PR_URL" >> $GITHUB_OUTPUT
      
      - name: Extract Service PR User
        id: extract_service_pr_user
        env:
          PR_USER: ${{ github.event.client_payload.repo.pr_user }}
        run: |
          echo "Service PR USER: $PR_USER"
          echo "service_pr_user=$PR_USER" >> $GITHUB_OUTPUT
      
      - name: Check if branch is master
        id: check_branch
        run: |
          if [ "${{ github.event.client_payload.repo.branch }}" == "master" ] || [ "${{ github.event.client_payload.repo.branch }}" == "main" ]; then
            echo "branch=staging" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ github.event.client_payload.repo.branch }}" >> $GITHUB_OUTPUT
          fi

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_PAT }}
          ref: ${{ steps.check_branch.outputs.branch }}
          fetch-depth: 0

      - name: Get branch name
        run: echo "branch=${{ steps.check_branch.outputs.branch }}" >> $GITHUB_OUTPUT
        id: get_branch

      - name: Get Image Tag
        run: echo "image_tag=${{ github.event.client_payload.repo.image_tag }}" >> $GITHUB_OUTPUT
        id: get_image_tag

      - name: Update Image Tag
        run: |
          bash ./.github/scripts/update-image-tag.sh ${{ github.event.client_payload.repo.name }} ${{ github.event.client_payload.repo.image_tag }}
        shell: bash

      - name: Commit changes
        uses: EndBug/add-and-commit@v9.1.3
        with:
          author_name: 'GitHub Actions'
          author_email: 'actions@github.com'
          message: 'Updating the Image Tag for ${{ github.event.client_payload.repo.name }}'
          add: './charts/values.yaml'
          default_author: user_info

      - name: Get previous tag from the repo
        id: get_latest_tag
        run: |
          repo_branch=${{ steps.get_branch.outputs.branch }}
          branch_name="$repo_branch"
          echo "branch_name=$(echo $branch_name)" >> $GITHUB_OUTPUT
          tag=$(git tag)
          git tag | grep $branch_name;
          tag=$(git tag | grep "\<$branch_name\>" | sort -V | grep 'v[0-9].*' | tail -1)
          echo $tag
          echo "tag=$(git tag | grep "\<$branch_name\>" | sort -V | grep 'v[0-9].*' | tail -1)" >> $GITHUB_OUTPUT
          if echo $tag | grep "999"; then
              echo "command=$(echo 'm')" >> $GITHUB_OUTPUT
          else
              echo "command=$(echo 'p')" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Get new tag by doing semver version bump
        id: bump_tag
        run: |
          git config --global http.postBuffer 1048576000
          chmod +x ./scripts/version-upgrade.sh
          bumped_tag=$(./scripts/version-upgrade.sh -${{ steps.get_latest_tag.outputs.command }} ${{ steps.get_latest_tag.outputs.tag }})
          echo "new_tag=$(echo $bumped_tag)" >> $GITHUB_OUTPUT

      - name: Get commit id
        run: echo "version=$(echo `git ls-remote https://${{ secrets.MY_PAT }}@github.com/ujala-singh/github-repository-dispatch-receiver.git ${{ steps.get_branch.outputs.branch }} | awk '{ print $1}' | cut -c1-7`)" >> $GITHUB_OUTPUT
        id: get_version

      - name: Create Release on the repo
        id: create_release
        uses: ncipollo/release-action@v1.13.0
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}
        with:
          tag: ${{ steps.bump_tag.outputs.new_tag }}-${{ steps.get_latest_tag.outputs.branch_name }}
          name: ${{ github.event.repository.name }}
          body: |
            ${{ github.event.head_commit.message }}
            Commit id - ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          owner: ujala-singh
          repo: github-repository-dispatch-receiver

      - name: Get SHA of the branch
        id: get_sha
        run: |
          branch_name=${{ steps.get_branch.outputs.branch }}
          sha=$(git rev-parse "refs/heads/$branch_name")
          echo "GIT_SHA: $sha"
          echo "sha=${sha}" >> $GITHUB_OUTPUT

      - name: Update Tags
        id: update_tags
        run: |
          #tag existing base tag
          git tag -f ${{ steps.get_latest_tag.outputs.branch_name }}-base ${{ steps.get_sha.outputs.sha }}
          #reset base tag 
          git push origin :refs/tags/${{ steps.get_latest_tag.outputs.branch_name }}-base
          #push new commit with existing base tag
          git push origin ${{ steps.get_latest_tag.outputs.branch_name }}-base
          #tag and push versioned tag
          git push origin :refs/tags/${{ steps.bump_tag.outputs.new_tag }}-${{ steps.get_latest_tag.outputs.branch_name }}
          git tag -f ${{ steps.bump_tag.outputs.new_tag }}-${{ steps.get_latest_tag.outputs.branch_name }} ${{ steps.get_sha.outputs.sha }}
          git push origin ${{ steps.bump_tag.outputs.new_tag }}-${{ steps.get_latest_tag.outputs.branch_name }}

  create_main_branch_pr:
    needs: dispatch-receiver
    runs-on: ubuntu-latest
    if: needs.dispatch-receiver.outputs.branch_name == 'staging'
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_PAT }}
          fetch-depth: 0

      - name: Check GitHub CLI version
        run: gh --version
      
      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Fetch latest changes
        run: git fetch origin

      - name: Pull latest changes
        run: |
          git checkout staging
          git pull origin staging

      - name: Parse reviewers mapping YAML
        id: parse_reviewers_mapping
        env:
          service_repo_name: ${{ needs.dispatch-receiver.outputs.service_repo_name }}
        run: |
          reviewers_mapping=$(cat reviewers-map.yaml | yq -r ".\"$service_repo_name\"[]" | tr '\n' ',' | sed 's/,$//')
          echo "reviewers_mapping=$reviewers_mapping" >> $GITHUB_OUTPUT

      - name: Create Main Branch PR
        run: |
          bash ./.github/scripts/create-pr-script-on-values.sh ${{ needs.dispatch-receiver.outputs.service_repo_name }} ${{ needs.dispatch-receiver.outputs.image_tag }} ${{ needs.dispatch-receiver.outputs.service_pr_url }} ${{ needs.dispatch-receiver.outputs.service_pr_user }} ${{ steps.parse_reviewers_mapping.outputs.reviewers_mapping }}
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}
